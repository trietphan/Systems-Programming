
CS:APP Cache Lab: Grading Sheet for tphan5.tar

Part 1: Compiling test framework

gcc -g -Wall -Werror -std=c99 -m64 -o csim csim.c cachelab.c -lm 
gcc -g -Wall -Werror -std=c99 -m64 -o csim-ref csim-ref.c cachelab.c -lm
gcc -g -Wall -Werror -std=c99 -m64 -o test-csim test-csim.c 
gcc -g -Wall -Werror -std=c99 -m64 -O0 -c trans.c
gcc -g -Wall -Werror -std=c99 -m64 -o test-trans test-trans.c cachelab.c trans.o 
gcc -g -Wall -Werror -std=c99 -m64 -O0 -o tracegen tracegen.c trans.o cachelab.c


Part 2: Running the driver

Part A: Testing cache simulator
Running ./test-csim
                        Your simulator     Reference simulator
Points (s,E,b)    Hits  Misses  Evicts    Hits  Misses  Evicts
     3 (1,1,1)       9       8       6       9       8       6  traces/yi2.trace
     3 (4,2,4)       4       5       2       4       5       2  traces/yi.trace
     3 (2,1,4)       2       3       1       2       3       1  traces/dave.trace
     3 (2,1,3)     167      71      67     167      71      67  traces/trans.trace
     3 (2,2,3)     201      37      29     201      37      29  traces/trans.trace
     3 (2,4,3)     212      26      10     212      26      10  traces/trans.trace
     3 (5,1,5)     231       7       0     231       7       0  traces/trans.trace
     6 (5,1,5)  265189   21775   21743  265189   21775   21743  traces/long.trace
    27


Part B: Testing transpose function
Running ./test-trans -M 32 -N 32
Running ./test-trans -M 64 -N 64
Running ./test-trans -M 61 -N 67

Cache Lab summary:
                        Points   Max pts      Misses
Csim correctness          27.0        27
Trans perf 32x32           8.0         8         287
Trans perf 64x64           7.4         8        1355
Trans perf 61x67          10.0        10        1847
          Total points    52.4        53

AUTORESULT_STRING=52.4:287:1355:1847


Part 3: Grade


Score : 52.4 / 53

Part 4: Handin files for tphan5.tar


*** csim.c ***
#include "cachelab.h"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <getopt.h>
#include <unistd.h>

typedef struct {
  char valid;
  int tag;
  int lru; //store least recently used for eviction
} line_t;

typedef struct {
  line_t *lines;
} set_t;

typedef struct {
  set_t *sets;
  int num_sets;
  int num_lines;
} cache_t;

int hits = 0, misses = 0, evics = 0;

void help_messages(char *argv[]);
int process_args(int argc, char *argv[], int *v, int *s, int *E, int *b, char **t);
int cache_init(cache_t *cache, int s, int E);
void read_trace_file(char *trace_name, int v, int b, int s, cache_t *cache);
void process_each_line(long address, int v, int b, int s, cache_t *cache);
int update_lru(cache_t *cache, int setBits, int line_num);
int extract_bits(long address, int start, int end);

int main(int argc, char *argv[]) {
  int s = 0, E = 0, b = 0, v = 0;
  char *t = NULL;
  cache_t cache;
  
  process_args(argc, argv, &v, &s, &E, &b, &t);
  cache_init(&cache, s, E);
  read_trace_file(t, v, b, s, &cache);
  printSummary(hits, misses, evics);
  return 0;
}

// Process user input
int process_args(int argc, char *argv[], int *v, int *s, int *E, int *b, char **t) {
  int opt;
  while ((opt = getopt(argc, argv, "vs:E:b:t:")) != -1) {
      switch(opt) {
      case 'v':
        *v = 1;
        break;
      case 's':
        *s = atoi(optarg);
        break;
      case 'b':
        *b = atoi(optarg);
        break;
      case 'E':
        *E = atoi(optarg);
        break;
      case 't':
        *t = optarg;
        break;
      case 'h':
        help_messages(argv);
        break;
      default:
        help_messages(argv);
        exit(-1);
        break;
      }
  }
  if(*s <= 0 || *b <= 0 || *E <= 0 || *t == NULL) {
      help_messages(argv);
      exit(-1);
  }
  return 0;
}

void help_messages(char *argv[]) {
  printf("Usage: %s [-hv] -s <num> -E <num> -b <num> -t <file>\n", argv[0]);
  printf("Options:\n");
  printf("  -h         Print this help message.\n");
  printf("  -v         Optional verbose flag.\n");
  printf("  -s <num>   Number of set index bits.\n");
  printf("  -E <num>   Number of lines per set.\n");
  printf("  -b <num>   Number of block offset bits.\n");
  printf("  -t <file>  Trace file.\n\n");
  printf("Examples:\n");
  printf("  linux>  %s -s 4 -E 1 -b 4 -t traces/yi.trace\n", argv[0]);
  printf("  linux>  %s -v -s 8 -E 2 -b 4 -t traces/yi.trace\n", argv[0]);
}

/* init a cache with given number of s (num_set), E (num_line), and b (block_size) values */
int cache_init(cache_t *cache, int s, int E){
  cache->num_sets = (2 << s);
  cache->num_lines = E;
  cache->sets = (set_t *)malloc(cache->num_sets * sizeof(set_t));
  int i, j;

  for (i = 0; i < cache->num_sets; i++) {
    cache->sets[i].lines = (line_t *)malloc(E * sizeof(line_t));
    for (j = 0; j < cache->num_lines; j++) {
      cache->sets[i].lines[j].valid = 0;
    }
  }
  return 0;
}

// Read the trace file line by line and store the address and the size
void read_trace_file(char *trace_name, int v, int b, int s, cache_t *cache) {
  char buff[100];
  FILE *tn = fopen(trace_name, "r");
  if (tn == NULL) {
    printf("%s: The trace does not exist", trace_name);
    return;
  }
  while (fgets(buff, 100, tn)) {
    unsigned long address = 0;
    unsigned size = 0;
    if (buff[1] == 'M' || buff[1] == 'S' || buff[1] == 'L') {
      sscanf(buff+2, "%lx,%u", &address, &size);
      if (v) printf("%c %lx,%u ", buff[1], address, size);
      process_each_line(address, v, b, s, cache);
    }
    if (buff[1] == 'M') {
      process_each_line(address, v, b, s, cache);
    }
    if (v) putchar('\n');
  }
  fclose(tn);
}

// Process line by line 
void process_each_line(long address, int v, int b, int s, cache_t *cache) {
  int setBits = extract_bits(address, b, b + s);
  int tagBits = extract_bits(address, b + s, 31);
  int i;
  
  for (i=0; i<cache->num_lines; i++) {
    if (cache->sets[setBits].lines[i].valid == 1 &&
        cache->sets[setBits].lines[i].tag == tagBits) {
      hits++;
      if (v) printf("hit ");
      update_lru(cache, setBits, i);
      return;
    }
  }
  misses++;
  if (v) printf("miss ");
  for (i = 0; i < cache->num_lines; i++) {
    if (cache->sets[setBits].lines[i].valid == 0) {
      cache->sets[setBits].lines[i].tag = tagBits;
      cache->sets[setBits].lines[i].valid = 1;
      update_lru(cache, setBits, i);
      return;
    }
  }
  evics++;
  for (i = 0; i < cache->num_lines; i++) {
    if (cache->sets[setBits].lines[i].lru == 1) {
      if (v) printf("evic ");
      cache->sets[setBits].lines[i].valid = 1;
      cache->sets[setBits].lines[i].tag = tagBits;
      update_lru(cache, setBits, i);
      return;
    }
  }
}


/* Update the least recently use for eviction */
int update_lru(cache_t *cache, int setBits, int line_num) {
  int i;
  for (i = 0; i<cache->num_lines; i++) {
    // the LRU has value 1, the most recent use has value 0
    if (cache->sets[setBits].lines[i].valid &&
        cache->sets[setBits].lines[i].lru > cache->sets[setBits].lines[line_num].lru) {
      --cache->sets[setBits].lines[i].lru; //decrement lru of all the other
    }
  }
  // the updated cache line has the num_lines value
  cache->sets[setBits].lines[line_num].lru = cache->num_lines;
  return 0;
}

int extract_bits(long address, int start, int end) {
  // Returns [start, end) bits from address
  int mask = (1 << (end - start)) - 1;
  return (address >> start) & mask;
}

*** trans.c ***
/* 
 * trans.c - Matrix transpose B = A^T
 *
 * Each transpose function must have a prototype of the form:
 * void trans(int M, int N, int A[N][M], int B[M][N]);
 *
 * A transpose function is evaluated by counting the number of misses
 * on a 1KB direct mapped cache with a block size of 32 bytes.
 */ 
#include <stdio.h>
#include "cachelab.h"

int is_transpose(int M, int N, int A[N][M], int B[M][N]);

/* 
 * transpose_submit - This is the solution transpose function that you
 *     will be graded on for Part B of the assignment. Do not change
 *     the description string "Transpose submission", as the driver
 *     searches for that string to identify the transpose function to
 *     be graded. 
 */
char transpose_submit_desc[] = "Transpose submission";
void transpose_submit(int M, int N, int A[N][M], int B[M][N])
{
  int rows, cols, block;

  if (M == 32 && N == 32) {
    int i, j, temp1, temp2;
    block = 8;

    for (rows = 0; rows < N; rows += block) {
      for (cols = 0; cols < M; cols += block) {
        for (j = cols; j < cols + block; j++) {
          for (i = rows; i < rows + block; i++) {
            if (i == j) {
              temp1 = A[i][i]; //store to temp1 to reduce missing
              temp2 = i; //Save the position at the diagonal
            } else {
              B[i][j] = A[j][i];
            }
          }
          if (rows == cols) {
            B[temp2][temp2] = temp1;
          }
        }
      }
    }
  }

  if (M == 64 && N == 64) {
    int i;
    int temp1, temp2, temp3, temp4, temp5, temp6, temp7, temp8;
    block = 8;
    
    for (rows = 0; rows < 64; rows += block) {
      for (cols = 0; cols < 64; cols += block) {
        for (i = 0; i < block; i++) {
          if (i == 0) {
            temp5 = A[rows][cols+4];
            temp6 = A[rows][cols+5];
            temp7 = A[rows][cols+6];
            temp8 = A[rows][cols+7];          
          }
          temp1 = A[rows+i][cols];
          temp2 = A[rows+i][cols+1];
          temp3 = A[rows+i][cols+2];
          temp4 = A[rows+i][cols+3];
          B[cols][rows+i] = temp1;
          B[cols][rows+i+64] = temp2;
          B[cols][rows+i+128] = temp3;
          B[cols][rows+i+192] = temp4;
        }
        for (i = block - 1; i > 0; i--) {
          temp1 = A[rows+i][cols+4];
          temp2 = A[rows+i][cols+5];
          temp3 = A[rows+i][cols+6];
          temp4 = A[rows+i][cols+7];
          B[cols+4][rows+i] = temp1;
          B[cols+4][rows+i+64] = temp2;
          B[cols+4][rows+i+128] = temp3;
          B[cols+4][rows+i+192] = temp4;
        }
        B[cols+4][rows] = temp5;
        B[cols+4][rows+64] = temp6;
        B[cols+4][rows+128] = temp7;
        B[cols+4][rows+192] = temp8;
      }
    }
  }
  
  if (M == 61 && N == 67) {
    int i, j;
    block = 16;
    
    for (rows = 0; rows < N; rows += block) {
      for (cols = 0; cols < M; cols += block) {
        for (j = 0; cols + j  <  M && j < block; j++) {
          for (i = 0; rows + i < N && i < block; i++) {
            B[cols+j][rows+i] = A[rows+i][cols+j];
          }
        }
      }
    }
  }
}

/*
 * registerFunctions - This function registers your transpose
 *     functions with the driver.  At runtime, the driver will
 *     evaluate each of the registered functions and summarize their
 *     performance. This is a handy way to experiment with different
 *     transpose strategies.
 */
void registerFunctions()
{
    /* Register your solution function */
    registerTransFunction(transpose_submit, transpose_submit_desc); 

    /* Register any additional transpose functions */
    /* registerTransFunction(trans, trans_desc);  */

}

/* 
 * is_transpose - This helper function checks if B is the transpose of
 *     A. You can check the correctness of your transpose by calling
 *     it before returning from the transpose function.
 */
int is_transpose(int M, int N, int A[N][M], int B[M][N])
{
    int i, j;

    for (i = 0; i < N; i++) {
        for (j = 0; j < M; ++j) {
            if (A[i][j] != B[j][i]) {
                return 0;
            }
        }
    }
    return 1;
}

